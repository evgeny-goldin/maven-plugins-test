<?xml version="1.0" encoding="UTF-8"?>

<project xmlns              = "http://maven.apache.org/POM/4.0.0"
         xmlns:xsi          = "http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation = "http://maven.apache.org/POM/4.0.0
                               http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.github.goldin.maven-plugins-test</groupId>
    <artifactId>maven-copy-plugin.copy-mojo</artifactId>
    <packaging>jar</packaging>
    <version>0.1-SNAPSHOT</version>
    <name>[${project.groupId}:${project.artifactId}:${project.version}]</name>


    <parent>
        <groupId>com.github.goldin.maven-plugins-test</groupId>
        <artifactId>maven-copy-plugin</artifactId>
        <version>0.1-SNAPSHOT</version>
    </parent>


    <properties>
        <zymicFtp>ftp://evgenyg_zxq:sdaed432e23@evgenyg.zxq.net</zymicFtp>
    </properties>


    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <includes>
                        <include>**</include>
                    </includes>
                </configuration>
            </plugin>


            <plugin>
                <groupId>com.github.goldin</groupId>
                <artifactId>maven-copy-plugin</artifactId>
                <version>${plugins-version}</version>
                <executions>
                    <execution>
                        <id>test-copy-mojo</id>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <phase>install</phase>
                        <configuration>
                            <resources>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing "{{latest}}" filter - (1) -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <description>Testing "{{latest}}" filter - (1)</description>
                                    <targetPath>${outputDir}/latestTest</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <replace>
                                        <to>{{ new Date() }}</to>
                                        <groovy>true</groovy>
                                    </replace>
                                    <destFileName>aa.txt</destFileName>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing pack + exclude scenario -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/pack-exclude/pack-exclude.zip</targetPath>
                                    <directory>${project.basedir}/src/main/resources</directory>
                                    <exclude>2.txt, 4.txt</exclude>
                                    <pack>true</pack>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/pack-exclude/unpack</targetPath>
                                    <file>${outputDir}/pack-exclude/pack-exclude.zip</file>
                                    <unpack>true</unpack>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing "<runIf>" -->
                                <!-- ~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/runIf</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <replace>
                                        <to><!-- Nothing --></to>
                                    </replace>
                                    <destFileName>1.txt</destFileName>
                                </resource>
                                <resource>
                                    <description>{{ '"3 == 5" test: [' + new Date() +']' }}</description>
                                    <runIf>{{ 3 == 5 }}</runIf>
                                    <targetPath>${outputDir}/runIf</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>2.txt</destFileName>
                                </resource>
                                <resource>
                                    <description>{{ '"true" test: [' + new Date() +']' }}</description>
                                    <runIf>{{ "true" }}</runIf>
                                    <targetPath>${outputDir}/runIf</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>3.txt</destFileName>
                                </resource>
                                <resource>
                                    <runIf>{{ "false" }}</runIf>
                                    <targetPath>${outputDir}/runIf</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>4.txt</destFileName>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing "failIfNotFound" -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/failIfNotFound</targetPath>
                                    <file>${project.basedir}/pom-doesnot-exist.xml</file>
                                    <failIfNotFound>false</failIfNotFound>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing Net resources -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <runIf>{{ slowTests }}</runIf>
                                    <targetPath>${outputDir}/net-http</targetPath>
                                    <file>http://dl.dropbox.com/u/4820835/search.png</file>
                                </resource>
                                <resource>
                                    <runIf>{{ slowTests }}</runIf>
                                    <targetPath>${outputDir}/net-http</targetPath>
                                    <file>http://dl.dropbox.com/u/4820835/hudson-maven-git-NPE/debugger.png</file>
                                </resource>
                                <resource>
                                    <runIf>{{ ftpTests }}</runIf>
                                    <targetPath>${outputDir}/net-ftp/1</targetPath>
                                    <directory>${zymicFtp}:/</directory>
                                    <include>index.html</include>
                                </resource>
                                <resource>
                                    <runIf>{{ ftpTests }}</runIf>
                                    <targetPath>${outputDir}/net-ftp/2</targetPath>
                                    <directory>${zymicFtp}:/apache-maven-3.0.1</directory>
                                    <include>lib/no-such-file*.jar</include>
                                    <failIfNotFound>false</failIfNotFound>
                                </resource>
                                <resource>
                                    <runIf>{{ ftpTests }}</runIf>
                                    <targetPath>${outputDir}/net-ftp/3</targetPath>
                                    <directory>${zymicFtp}:/apache-maven-3.0.1/lib</directory>
                                    <include>wagon-*.jar</include>
                                    <exclude>wagon-http-*.jar</exclude>
                                </resource>
                                <resource>
                                    <runIf>{{ Boolean.valueOf( ftpTests ) &amp;&amp; ( ! mavenVersion.startsWith( '2' )) }}</runIf>
                                    <targetPath>${outputDir}/net-ftp/4</targetPath>
                                    <directory>${zymicFtp}:/apache-maven-3.0.1</directory>
                                    <include>file:${project.basedir}/src/main/resources/ftp-include.txt</include>
                                    <exclude>classpath:/ftp-exclude.txt</exclude>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing <defaultExcludes> (http://evgeny-goldin.org/youtrack/issue/pl-278) -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/defaultExcludes</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>0.txt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/defaultExcludes/.svn</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>1.txt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/defaultExcludes/.svn</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>2.txt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/defaultExcludesSelect/1</targetPath>
                                    <directory>${outputDir}/defaultExcludes</directory>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/defaultExcludesSelect/2</targetPath>
                                    <directory>${outputDir}/defaultExcludes</directory>
                                    <defaultExcludes>false</defaultExcludes>
                                    <preservePath>true</preservePath>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/defaultExcludesSelect/3</targetPath>
                                    <directory>${outputDir}/defaultExcludes</directory>
                                    <defaultExcludes>**/.svn/**, **/.git/**</defaultExcludes>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/defaultExcludesSelect/4</targetPath>
                                    <directory>${outputDir}/defaultExcludes</directory>
                                    <defaultExcludes>**/.git/**</defaultExcludes>
                                    <preservePath>true</preservePath>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/defaultExcludesSelect/5</targetPath>
                                    <directory>${outputDir}/defaultExcludes</directory>
                                    <defaultExcludes>.svn/**</defaultExcludes>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/defaultExcludesSelect/6</targetPath>
                                    <directory>${outputDir}/defaultExcludes</directory>
                                    <defaultExcludes>**/.git/**</defaultExcludes>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing "mavenVersion" in Groovy context (http://evgeny-goldin.org/youtrack/issue/pl-266) -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/mavenVersion</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <replace>
                                        <to>{{ mavenVersion }}</to>
                                        <groovy>true</groovy>
                                    </replace>
                                    <destFileName>1.txt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/mavenVersion</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <filter>
                                        {{
                                            assert mavenVersion
                                            assert mavenVersion.startsWith( '2' ) || mavenVersion.startsWith( '3' )
                                            files
                                        }}
                                    </filter>
                                    <process>
                                        {{
                                            assert mavenVersion
                                            assert mavenVersion.startsWith( '2' ) || mavenVersion.startsWith( '3' )
                                            files.first().write( mavenVersion )
                                        }}
                                    </process>
                                    <destFileName>2.txt</destFileName>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing <cleanEmptyDirectories> (http://evgeny-goldin.org/youtrack/issue/pl-286) -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories/a</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>1.txt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories/a/b</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>2.pdf</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories/a/e</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>3.ppt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories/a/e/m</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>4.ppt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories/a/e/f</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>5.ppt</destFileName>
                                </resource>
                                <resource>
                                    <directory>${outputDir}/cleanEmptyDirectories</directory>
                                    <clean>true</clean>
                                    <include>**/*.ppt</include>
                                </resource>

                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories2/a</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>1.txt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories2/a/b</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>2.pdf</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories2/a/e</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>3.ppt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories2/a/e/m</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>4.ppt</destFileName>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/cleanEmptyDirectories2/a/e/f</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <destFileName>5.ppt</destFileName>
                                </resource>
                                <resource>
                                    <directory>${outputDir}/cleanEmptyDirectories2</directory>
                                    <clean>true</clean>
                                    <cleanEmptyDirectories>true</cleanEmptyDirectories>
                                    <include>**/*.ppt</include>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing optional <dependencies> -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/optionalDependencies</targetPath>
                                    <dependencies>
                                        <dependency>
                                            <groupId>org.jvnet.hudson.plugins</groupId>
                                            <artifactId>greenballs</artifactId>
                                            <version>1.6</version>
                                            <optional>true</optional>
                                            <type>hpi</type>
                                        </dependency>
                                        <dependency>
                                            <groupId>org.jvnet.hudson.plugins</groupId>
                                            <artifactId>artifactory</artifactId>
                                            <version>1.4.2</version>
                                            <optional>false</optional>
                                            <type>hpi</type>
                                        </dependency>
                                        <dependency>
                                            <groupId>org.jvnet.hudson.plugins</groupId>
                                            <artifactId>artifactory</artifactId>
                                            <version>100.400.100</version>
                                            <optional>true</optional>
                                            <type>hpi</type>
                                        </dependency>
                                        <dependency>
                                            <groupId>org.jvnet.hudson.plugins</groupId>
                                            <artifactId>artifactory</artifactId>
                                            <version>100.500.100</version>
                                            <optional>true</optional>
                                            <type>hpi</type>
                                        </dependency>
                                    </dependencies>
                                    <unpack>true</unpack>
                                </resource>

                                <resource>
                                    <targetPath>${outputDir}/optionalDependencies2</targetPath>
                                    <dependenciesAtM2>true</dependenciesAtM2>
                                    <dependencies>
                                        <dependency>
                                            <groupId>org.jvnet.hudson.plugins</groupId>
                                            <artifactId>greenballs</artifactId>
                                            <version>1.6</version>
                                            <optional>false</optional>
                                            <type>hpi</type>
                                        </dependency>
                                        <dependency>
                                            <groupId>org.jvnet.hudson.plugins</groupId>
                                            <artifactId>artifactory</artifactId>
                                            <version>1.4.2</version>
                                            <optional>true</optional>
                                            <type>hpi</type>
                                        </dependency>
                                        <dependency>
                                            <groupId>org.jvnet.hudson.plugins</groupId>
                                            <artifactId>artifactory</artifactId>
                                            <version>100.400.100</version>
                                            <optional>true</optional>
                                            <type>hpi</type>
                                        </dependency>
                                        <dependency>
                                            <groupId>org.jvnet.hudson.plugins</groupId>
                                            <artifactId>artifactory</artifactId>
                                            <version>200.600.300</version>
                                            <optional>true</optional>
                                            <type>hpi</type>
                                        </dependency>
                                    </dependencies>
                                    <unpack>true</unpack>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~ -->
                                <!-- Testing <mkdir> -->
                                <!-- ~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/mkdir/1</targetPath>
                                    <mkdir>true</mkdir>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/mkdir/2/5/7</targetPath>
                                    <mkdir>true</mkdir>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/mkdir/3/9/qqq</targetPath>
                                    <mkdir>true</mkdir>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/mkdir/qqq/ccc/vvv/bbb/ggg</targetPath>
                                    <mkdir>true</mkdir>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing patterns update -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/patternsUpdate/1</targetPath>
                                    <dependency>
                                        <groupId>org.jvnet.hudson.plugins</groupId>
                                        <artifactId>artifactory</artifactId>
                                        <version>1.4.2</version>
                                        <optional>true</optional>
                                        <type>hpi</type>
                                    </dependency>
                                    <dependenciesAtM2>true</dependenciesAtM2>
                                    <unpack>true</unpack>
                                </resource>
                                <resource>
                                    <targetPath>${outputDir}/patternsUpdate/2</targetPath>
                                    <directory>${outputDir}/patternsUpdate/1</directory>
                                    <preservePath>true</preservePath>
                                    <verbose>false</verbose>
                                </resource>
                                <resource>
                                    <runIf>{{ ! mavenVersion.startsWith( '2' ) }}</runIf>
                                    <targetPath>${outputDir}/patternsUpdate/3</targetPath>
                                    <directory>${outputDir}/patternsUpdate/1</directory>
                                    <preservePath>true</preservePath>
                                    <includes>
                                        <include>**/*.jelly,**/*.properties,**/*.png,**/*.Extension,**/*.html,**/*.MF,</include>
                                        <include>**/*.stapler,**/*.stapler-beans,**/*.xml,,,**/*.conf,,</include>
                                        <include>file:${project.basedir}/src/main/resources/1.txt</include>
                                        <include>file:${project.basedir}/src/main/resources/2.txt</include>
                                        <include>file:${project.basedir}/src/main/resources/3.txt</include>
                                        <include>classpath:/1.txt</include>
                                        <include>classpath:/2.txt</include>
                                        <include>classpath:/3.txt</include>
                                    </includes>
                                    <excludes>
                                        <exclude>classpath:/4.txt</exclude>
                                    </excludes>
                                    <verbose>false</verbose>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing System properties and some Environment variables -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <targetPath>${outputDir}/systemProperties</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <replace>
                                        <to><!-- Nothing --></to>
                                    </replace>
                                    <destFileName>oppa.txt</destFileName>
                                    <process>
                                        {{
                                            def check ( name, value )
                                            {
                                                assert value
                                                def message = "[$name]".padRight( 30 ) + " = [$value]"
                                                println message
                                                files.first().append( message + lineSeparator )
                                            }

                                            check( 'mavenVersion',               mavenVersion )
                                            check( 'javaVersion',                javaVersion )
                                            check( 'javaVendor',                 javaVendor )
                                            check( 'javaVendorUrl',              javaVendorUrl )
                                            check( 'javaHome',                   javaHome )
                                            check( 'javaVmSpecificationVersion', javaVmSpecificationVersion )
                                            check( 'javaVmSpecificationVendor',  javaVmSpecificationVendor )
                                            check( 'javaVmSpecificationName',    javaVmSpecificationName )
                                            check( 'javaVmVersion',              javaVmVersion )
                                            check( 'javaVmVendor',               javaVmVendor )
                                            check( 'javaVmName',                 javaVmName )
                                            check( 'javaSpecificationVersion',   javaSpecificationVersion )
                                            check( 'javaSpecificationVendor',    javaSpecificationVendor )
                                            check( 'javaSpecificationName',      javaSpecificationName )
                                            check( 'javaClassVersion',           javaClassVersion )
                                            check( 'javaClassPath',              javaClassPath )
                                            check( 'javaLibraryPath',            javaLibraryPath )
                                            check( 'javaIoTmpdir',               javaIoTmpdir )
                                            <!--check( 'javaCompiler',               javaCompiler )-->
                                            check( 'javaExtDirs',                javaExtDirs )
                                            check( 'osName',                     osName )
                                            check( 'osArch',                     osArch )
                                            check( 'osVersion',                  osVersion )
                                            check( 'fileSeparator',              fileSeparator )
                                            check( 'pathSeparator',              pathSeparator )
                                            check( 'lineSeparator',              lineSeparator )
                                            check( 'userName',                   userName )
                                            check( 'userHome',                   userHome )
                                            check( 'userDir',                    userDir )

                                            check( 'M2_HOME',                    envM2_HOME )
                                            check( 'JAVA_HOME',                  envJAVA_HOME )
                                            check( 'PATH',                       envPATH )
                                        }}
                                    </process>
                                </resource>

                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                                <!-- Testing "{{latest}}" filter - (2) -->
                                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

                                <resource>
                                    <description>Testing "{{latest}}" filter - (2)</description>
                                    <targetPath>${outputDir}/latestTest</targetPath>
                                    <file>${project.basedir}/pom.xml</file>
                                    <replace>
                                        <to>{{ new Date() }}</to>
                                        <groovy>true</groovy>
                                    </replace>
                                    <destFileName>bb.txt</destFileName>
                                </resource>
                                <resource>
                                    <description>Testing "{{latest}}" filter - selection</description>
                                    <targetPath>${outputDir}/latestTestSelect</targetPath>
                                    <directory>${outputDir}/latestTest</directory>
                                    <filter>{{latest}}</filter>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.github.goldin.maven-plugins-test</groupId>
                        <artifactId>maven-copy-plugin.copy-mojo</artifactId>
                        <version>0.1-SNAPSHOT</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>com.github.goldin</groupId>
                <artifactId>maven-assert-plugin</artifactId>
                <version>${plugins-version}</version>
                <executions>
                    <execution>
                        <id>assert-copy-mojo</id>
                        <goals>
                            <goal>assert</goal>
                        </goals>
                        <phase>install</phase>
                        <configuration>
                            <assertFiles>
                                ${outputDir}/latestTestSelect/bb.txt

                                ${outputDir}/pack-exclude/unpack/1.txt
                                ${outputDir}/pack-exclude/unpack/3.txt
                                ${outputDir}/pack-exclude/unpack/ftp-exclude.txt
                                ${outputDir}/pack-exclude/unpack/ftp-include.txt

                                ${outputDir}/runIf/1.txt
                                ${outputDir}/runIf/3.txt

                                ${outputDir}/defaultExcludesSelect/1/0.txt
                                ${outputDir}/defaultExcludesSelect/2/0.txt
                                ${outputDir}/defaultExcludesSelect/2/.svn/1.txt
                                ${outputDir}/defaultExcludesSelect/2/.svn/2.txt
                                ${outputDir}/defaultExcludesSelect/3/0.txt
                                ${outputDir}/defaultExcludesSelect/4/0.txt
                                ${outputDir}/defaultExcludesSelect/4/.svn/1.txt
                                ${outputDir}/defaultExcludesSelect/4/.svn/2.txt
                                ${outputDir}/defaultExcludesSelect/5/0.txt
                                ${outputDir}/defaultExcludesSelect/6/0.txt
                                ${outputDir}/defaultExcludesSelect/6/1.txt
                                ${outputDir}/defaultExcludesSelect/6/2.txt

                                ${outputDir}/cleanEmptyDirectories
                                ${outputDir}/cleanEmptyDirectories/a
                                ${outputDir}/cleanEmptyDirectories/a/b
                                ${outputDir}/cleanEmptyDirectories/a/e
                                ${outputDir}/cleanEmptyDirectories/a/e/m
                                ${outputDir}/cleanEmptyDirectories/a/e/f

                                ${outputDir}/cleanEmptyDirectories2
                                ${outputDir}/cleanEmptyDirectories2/a
                                ${outputDir}/cleanEmptyDirectories2/a/b

                                ${outputDir}/optionalDependencies
                                ${outputDir}/optionalDependencies/*.sh
                                ${outputDir}/optionalDependencies/*.svg
                                ${outputDir}/optionalDependencies/makeBalls.sh
                                ${outputDir}/optionalDependencies/green.svg
                                ${outputDir}/optionalDependencies/16x16
                                ${outputDir}/optionalDependencies/24x24/*.gif
                                ${outputDir}/optionalDependencies/32x32/green_anime.gif
                                ${outputDir}/optionalDependencies/48x48/green.gif
                                ${outputDir}/optionalDependencies/WEB-INF/classes/org/jfrog/hudson
                                ${outputDir}/optionalDependencies/WEB-INF/classes/org/jfrog/hudson/maven3/*.class
                                ${outputDir}/optionalDependencies/WEB-INF/classes/org/jfrog/hudson/maven3/ArtifactoryMaven3Configurator$1.class

                                ${outputDir}/mkdir
                                ${outputDir}/mkdir/1
                                ${outputDir}/mkdir/2
                                ${outputDir}/mkdir/2/5
                                ${outputDir}/mkdir/2/5/7
                                ${outputDir}/mkdir/3
                                ${outputDir}/mkdir/3/9
                                ${outputDir}/mkdir/3/9/qqq
                                ${outputDir}/mkdir/qqq
                                ${outputDir}/mkdir/qqq/ccc
                                ${outputDir}/mkdir/qqq/ccc/vvv
                                ${outputDir}/mkdir/qqq/ccc/vvv/bbb
                                ${outputDir}/mkdir/qqq/ccc/vvv/bbb/ggg

                                ${outputDir}/systemProperties/oppa.txt
                            </assertFiles>
                            <assertEqual>
                                ${outputDir}/defaultExcludesSelect/1|${outputDir}/defaultExcludesSelect/3
                                ${outputDir}/defaultExcludesSelect/2|${outputDir}/defaultExcludesSelect/4
                                ${outputDir}/defaultExcludesSelect/3|${outputDir}/defaultExcludesSelect/5

                                ${outputDir}/cleanEmptyDirectories|${outputDir}/cleanEmptyDirectories2|**/*.pdf
                                ${outputDir}/cleanEmptyDirectories|${outputDir}/cleanEmptyDirectories2|**/*.txt
                                ${outputDir}/cleanEmptyDirectories|${outputDir}/cleanEmptyDirectories2|**/*.*
                                ${outputDir}/cleanEmptyDirectories|${outputDir}/cleanEmptyDirectories2|**

                                ${outputDir}/optionalDependencies|${outputDir}/optionalDependencies2|**/*.class
                                ${outputDir}/optionalDependencies|${outputDir}/optionalDependencies2|**/*.jar
                                ${outputDir}/optionalDependencies|${outputDir}/optionalDependencies2|**/*.html
                                ${outputDir}/optionalDependencies|${outputDir}/optionalDependencies2|**/*.gif

                                ${outputDir}/patternsUpdate/1|${outputDir}/patternsUpdate/2
                            </assertEqual>
                            <shouldFailAssertEqual>
                                ${outputDir}/cleanEmptyDirectories|${outputDir}/cleanEmptyDirectories2|**/*.exe
                                ${outputDir}/cleanEmptyDirectories|${outputDir}/cleanEmptyDirectories2|**/*.dll
                                ${outputDir}/cleanEmptyDirectories|${outputDir}/cleanEmptyDirectories2
                                ${outputDir}/optionalDependencies|${outputDir}/optionalDependencies3
                            </shouldFailAssertEqual>
                            <shouldFailAssertFiles>
                                ${outputDir}/pack-exclude/unpack/2.txt
                                ${outputDir}/pack-exclude/unpack/4.txt

                                ${outputDir}/cleanEmptyDirectories2/a/e
                                ${outputDir}/cleanEmptyDirectories2/a/e/m
                                ${outputDir}/cleanEmptyDirectories2/a/e/f

                                ${outputDir}/optionalDependencies/*.pdf
                                ${outputDir}/optionalDependencies/*.png
                                ${outputDir}/optionalDependencies3
                                ${outputDir}/optionalDependencies3/*.pdf
                                ${outputDir}/optionalDependencies3/*.png

                                ${outputDir}/systemProperties/opa.txt
                            </shouldFailAssertFiles>
                            <assertGroovy>
                                new File( outputDir, 'pack-exclude/unpack' ).listFiles().size() == 10
                                new File( outputDir, 'pack-exclude/unpack' ).directorySize()    == 110

                                new File( outputDir, 'latestTestSelect/bb.txt' ).text
                              ! new File( outputDir, 'runIf/1.txt' ).text
                                new File( outputDir, 'runIf/3.txt' ).text
                                new File( outputDir, 'runIf' ).list().size() == 2

                              ! new File( outputDir, 'failIfNotFound' ).isDirectory()

                                new File( outputDir, 'defaultExcludesSelect/1' ).list().size() == 1
                                new File( outputDir, 'defaultExcludesSelect/2' ).list().size() == 2
                                new File( outputDir, 'defaultExcludesSelect/3' ).list().size() == 1
                                new File( outputDir, 'defaultExcludesSelect/4' ).list().size() == 2
                                new File( outputDir, 'defaultExcludesSelect/5' ).list().size() == 1
                                new File( outputDir, 'defaultExcludesSelect/6' ).list().size() == 3

                                new File( outputDir, 'mavenVersion/1.txt' ).text == new File( outputDir, 'mavenVersion/2.txt' ).text
                                new File( outputDir, 'mavenVersion/1.txt' ).text.any{( it.startsWith( '2' )) || ( it.startsWith( '3' ))}
                                new File( outputDir, 'mavenVersion/2.txt' ).text.any{( it.startsWith( '2' )) || ( it.startsWith( '3' ))}
                                new File( outputDir, 'mavenVersion/1.txt' ).size() == 5 // '2.2.1' or '3.0.2'
                                new File( outputDir, 'mavenVersion/2.txt' ).size() == 5

                              ! new File( outputDir, 'cleanEmptyDirectories2/a/e' ).isDirectory()
                              ! new File( outputDir, 'cleanEmptyDirectories2/a/e/m' ).isDirectory()
                              ! new File( outputDir, 'cleanEmptyDirectories2/a/e/f' ).isDirectory()
                                new File( outputDir, 'cleanEmptyDirectories' ).directorySize() == new File( outputDir, 'cleanEmptyDirectories2' ).directorySize()

                                <!-- Directories size depends on the order of processing <dependencies> -->
                                new File( outputDir, 'optionalDependencies'  ).directorySize().any{( it == 5055913 ) || ( it == 5056072 )}
                                new File( outputDir, 'optionalDependencies2' ).directorySize().any{( it == 5055913 ) || ( it == 5056072 )}

                                new File( outputDir, 'mkdir' ).directorySize() == 0

                                new File( outputDir, 'systemProperties/oppa.txt' ).isFile()
                                new File( outputDir, 'systemProperties/oppa.txt' ).size() > 0
                                new File( outputDir, 'systemProperties/oppa.txt' ).text.contains( 'M2_HOME' )
                                new File( outputDir, 'systemProperties/oppa.txt' ).text.contains( 'JAVA_HOME' )
                                new File( outputDir, 'systemProperties/oppa.txt' ).text.contains( 'userName' )
                                new File( outputDir, 'systemProperties/oppa.txt' ).text.contains( 'javaVersion' )
                                new File( outputDir, 'systemProperties/oppa.txt' ).text.contains( 'javaVmName' )
                            </assertGroovy>
                        </configuration>
                    </execution>
                    <execution>
                        <id>assert-copy-mojo-slowTests</id>
                        <goals>
                            <goal>assert</goal>
                        </goals>
                        <phase>install</phase>
                        <configuration>
                            <runIf>{{ ftpTests }}</runIf>
                            <assertFiles>
                                ${outputDir}/net-http/search.png
                                ${outputDir}/net-http/debugger.png
                                ${outputDir}/net-ftp/1/index.html
                                ${outputDir}/net-ftp/3/wagon-file-1.0-beta-7.jar
                                ${outputDir}/net-ftp/3/wagon-provider-api-1.0-beta-7.jar
                            </assertFiles>
                            <assertGroovy>
                                new File( outputDir, 'net-http/search.png'   ).size() == 987
                                new File( outputDir, 'net-http/debugger.png' ).size() == 193080
                              ! new File( outputDir, 'net-ftp/2' ).isDirectory()
                                new File( outputDir, 'net-ftp/3' ).list().size()   == 2
                                new File( outputDir, 'net-ftp/3' ).directorySize() == 64290
                            </assertGroovy>
                        </configuration>
                    </execution>
                    <execution>
                        <id>assert-copy-mojo-not-maven2</id>
                        <goals>
                            <goal>assert</goal>
                        </goals>
                        <phase>install</phase>
                        <configuration>
                            <runIf>{{ Boolean.valueOf( ftpTests ) &amp;&amp; ( ! mavenVersion.startsWith( '2' )) }}</runIf>
                            <assertFiles>
                                ${outputDir}/net-ftp/4/mvn
                                ${outputDir}/net-ftp/4/mvn.bat
                                ${outputDir}/net-ftp/4/mvnyjp
                            </assertFiles>
                            <assertEqual>
                                ${outputDir}/patternsUpdate/2|${outputDir}/patternsUpdate/3
                                ${outputDir}/patternsUpdate/1|${outputDir}/patternsUpdate/3
                                ${outputDir}/patternsUpdate/1|${outputDir}/patternsUpdate/3|**
                                ${outputDir}/patternsUpdate/1|${outputDir}/patternsUpdate/3|**/*
                                ${outputDir}/patternsUpdate/1|${outputDir}/patternsUpdate/3|**/*.*
                            </assertEqual>
                            <assertGroovy>
                                new File( outputDir, 'net-ftp/4' ).list().size()   == 3
                                new File( outputDir, 'net-ftp/4' ).directorySize() == 15438

                                new File( outputDir, 'patternsUpdate' ).directorySize()   == ( 14945298 / 1 )
                                new File( outputDir, 'patternsUpdate/1' ).directorySize() == ( 14945298 / 3 )
                                new File( outputDir, 'patternsUpdate/2' ).directorySize() == ( 14945298 / 3 )
                                new File( outputDir, 'patternsUpdate/3' ).directorySize() == ( 14945298 / 3 )
                            </assertGroovy>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
